<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_overlay(true);

dx[0] = 1; dy[0] = 0;
dx[1] = -1; dy[1] = 0;
dx[2] = 0; dy[2] = 1;
dx[3] = 0; dy[3] = -1;
possible_neighbors = array_length_1d(dx);

iters = 5;

update_thresh = 1;//10;
update=0;

x_steps = 50;
y_steps = 50;

x_step_size = room_width / x_steps;
y_step_size = room_height / y_steps;

inertia = .3;

for(i = 0; i &lt; x_steps; i++) {
    for(j = 0; j &lt; x_steps; j++) {
        r[i ,j] = i;
        g[i ,j] = j;
        b[i ,j] = i+j;
        r_new[i ,j] = i;
        g_new[i ,j] = j;
        b_new[i ,j] = i+j;
    } 
}
r[10, 10] = 255;
g[10, 10] = 255;
b[10, 10] = 255;


x_smash = floor(random(x_steps));
y_smash = floor(random(y_steps));
r_smash = random(255);
g_smash = random(255);
b_smash = random(255);

smash_update = 0;
smash_update_thresh = 60;

should_smash = 0;

strength = .001;
reduce = false;
increase = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(dev = 0; dev &lt; 10; dev++) {
    if(device_mouse_check_button(dev, mb_left))
    {
        mx = device_mouse_x(dev);
        my = device_mouse_y(dev);
        
        bleach_x = max(0, min(floor(mx / x_step_size), x_steps - 1));
        bleach_y = max(0, min(floor(my / y_step_size), y_steps - 1));
        
        r[bleach_x, bleach_y] = 255;
        g[bleach_x, bleach_y] = 255;
        b[bleach_x, bleach_y] = 255;
    }
}

for(iter = 0; iter &lt; iters; iter++) {
    //if(update &gt;= update_thresh) {
        //update = 0;
        for(i = 0; i &lt; x_steps; i++) {
            for(j = 0; j &lt; y_steps; j++) {
                neighbors = 0;
                neighbor_avg_r = 0;
                neighbor_avg_g = 0;
                neighbor_avg_b = 0;
                for(q = 0; q &lt; possible_neighbors; q++) {
                   neigh_x = i + dx[q];
                   neigh_y = j + dy[q];
                   if(neigh_x &lt; 0 || neigh_x &gt;= x_steps || neigh_y &lt; 0 || neigh_y &gt;= y_steps) {
                        continue;
                   }
                   neighbors++;
                   neighbor_avg_r += r[neigh_x, neigh_y];
                   neighbor_avg_g += g[neigh_x, neigh_y];
                   neighbor_avg_b += b[neigh_x, neigh_y];
                }
                neighbor_avg_r /= neighbors;
                neighbor_avg_g /= neighbors;
                neighbor_avg_b /= neighbors;
                r_new[i, j] = (r[i, j]*inertia) + (neighbor_avg_r * (1-inertia));
                g_new[i, j] = (g[i, j]*inertia) + (neighbor_avg_g * (1-inertia));
                b_new[i, j] = (b[i, j]*inertia) + (neighbor_avg_b * (1-inertia));
                
                if (reduce) {
                    reduce_strength = 1 - strength;
                    r_new[i, j] *= reduce_strength;
                    g_new[i, j] *= reduce_strength;
                    b_new[i, j] *= reduce_strength;
                }
                if (increase) {
                    increase_strength = 1 + strength;
                    r_new[i, j] *= increase_strength;
                    g_new[i, j] *= increase_strength;
                    b_new[i, j] *= increase_strength;
                }
            }
        }
        
        r = r_new;
        g = g_new;
        b = b_new;
        
        
    //}
}

if(smash_update &gt;= smash_update_thresh) {
    smash_update = 0;
    x_smash = floor(random(x_steps));
    y_smash = floor(random(y_steps));
    r_smash = random(255);
    g_smash = random(255);
    b_smash = random(255);
}

if (should_smash == 1) {
    r[x_smash, y_smash] = r_smash;
    g[x_smash, y_smash] = g_smash;
    b[x_smash, y_smash] = b_smash;
}

smash_update++;
update++;


/*for(i = 0; i &lt; x_steps; i++) {
    for(j = 0; j &lt; y_steps; j++) {
        r[i, j] = r_new[i, j];
        g[i, j] = g_new[i, j];
        b[i, j] = b_new[i, j];
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="82">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inertia -= .01;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inertia += .01;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*bleach_x = max(0, min(floor(mouse_x / x_step_size), x_steps - 1));
bleach_y = max(0, min(floor(mouse_y / y_step_size), y_steps - 1));

r[bleach_x, bleach_y] = 255;
g[bleach_x, bleach_y] = 255;
b[bleach_x, bleach_y] = 255;*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i = 0; i &lt; x_steps; i++) {
    for(j = 0; j &lt; y_steps; j++) {
        color = make_colour_rgb(r[i, j], g[i, j], b[i, j]);
        //color = make_colour_hsv(r[i, j], g[i, j], b[i, j]);
        x_start = i * x_step_size;
        y_start = j * y_step_size;
        //draw_rectangle_fast(x_start, y_start, x_start + x_step_size, y_start + y_step_size, color);
        draw_rectangle_colour(x_start, y_start, x_start + x_step_size, y_start + y_step_size, color, color, color, color, false);
    }
}

draw_text(room_width - 100, 30, string(inertia));
draw_text(room_width - 100, room_height -30, string(iters));
draw_text(100, room_height -30, string(r[25,25]));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>iters++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>iters--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>increase = !increase;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reduce = !reduce;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>should_smash = 1 - should_smash;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
